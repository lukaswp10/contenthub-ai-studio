/**
 * üîç DIAGN√ìSTICO CHROMIUM VERCEL - ClipsForge Pro
 * 
 * Fun√ß√£o espec√≠fica para diagnosticar problemas do Chromium em produ√ß√£o
 * Logs apenas em produ√ß√£o, n√£o polui ambiente local
 * 
 * @author ClipsForge Team
 * @version 1.0.0 - Diagn√≥stico
 */

export default async function handler(req, res) {
  const isProduction = process.env.VERCEL_ENV === 'production';
  
  // ‚úÖ LOGS CONDICIONAIS (s√≥ produ√ß√£o)
  const log = (message) => {
    if (isProduction) {
      console.log(message);
    }
  };
  
  // Configurar CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  log('üî• DIAGN√ìSTICO: Fun√ß√£o iniciou');
  
  const diagnostico = {
    ambiente: isProduction ? 'PRODU√á√ÉO' : 'LOCAL',
    timestamp: new Date().toISOString(),
    etapas: [],
    sucesso: false,
    erro: null
  };

  try {
    // ===== ETAPA 1: TESTAR IMPORTS =====
    log('üì¶ ETAPA 1: Testando imports das depend√™ncias...');
    diagnostico.etapas.push('ETAPA 1: Imports iniciado');
    
    let chromium, puppeteer;
    
    try {
      // ‚úÖ CORRE√á√ÉO: ES6 import din√¢mico
      chromium = await import('@sparticuz/chromium');
      chromium = chromium.default || chromium; // Handle default export
      log('‚úÖ @sparticuz/chromium: CARREGADO (ES6)');
      diagnostico.etapas.push('@sparticuz/chromium: OK (ES6)');
    } catch (error) {
      log(`‚ùå @sparticuz/chromium: ERRO - ${error.message}`);
      diagnostico.etapas.push(`@sparticuz/chromium: ERRO - ${error.message}`);
      throw new Error(`Erro carregando @sparticuz/chromium: ${error.message}`);
    }
    
    try {
      // ‚úÖ TESTE: Playwright em vez de Puppeteer (menos detect√°vel)
      puppeteer = await import('playwright-core');
      puppeteer = puppeteer.default || puppeteer; // Handle default export
      log('‚úÖ playwright-core: CARREGADO (ES6) - TESTE ANTI-DETEC√á√ÉO');
      diagnostico.etapas.push('playwright-core: OK (ES6)');
    } catch (error) {
      log(`‚ùå playwright-core: ERRO - ${error.message}`);
      diagnostico.etapas.push(`playwright-core: ERRO - ${error.message}`);
      throw new Error(`Erro carregando playwright-core: ${error.message}`);
    }

    // ===== ETAPA 2: VERIFICAR EXECUTABLE =====
    log('üîß ETAPA 2: Verificando Chromium executable...');
    diagnostico.etapas.push('ETAPA 2: Executable iniciado');
    
    let executablePath;
    try {
      executablePath = await chromium.executablePath();
      log(`‚úÖ Executable path: ${executablePath ? 'ENCONTRADO' : 'VAZIO'}`);
      log(`üìç Path: ${executablePath}`);
      diagnostico.etapas.push(`Executable: ${executablePath ? 'OK' : 'VAZIO'}`);
      
      if (!executablePath) {
        throw new Error('Executable path retornou vazio');
      }
    } catch (error) {
      log(`‚ùå Executable ERRO: ${error.message}`);
      diagnostico.etapas.push(`Executable: ERRO - ${error.message}`);
      throw new Error(`Erro obtendo executable: ${error.message}`);
    }

    // ===== ETAPA 3: TESTAR ARGS CHROMIUM =====
    log('‚öôÔ∏è ETAPA 3: Verificando args do Chromium...');
    diagnostico.etapas.push('ETAPA 3: Args iniciado');
    
    try {
      const args = chromium.args;
      log(`‚úÖ Args dispon√≠veis: ${args ? args.length : 0} argumentos`);
      log(`üìã Args: ${args ? args.slice(0, 3).join(', ') + '...' : 'NENHUM'}`);
      diagnostico.etapas.push(`Args: ${args ? args.length + ' args' : 'NENHUM'}`);
    } catch (error) {
      log(`‚ùå Args ERRO: ${error.message}`);
      diagnostico.etapas.push(`Args: ERRO - ${error.message}`);
    }

    // ===== ETAPA 4: TESTAR LAUNCH B√ÅSICO =====
    log('üöÄ ETAPA 4: Testando launch b√°sico do browser...');
    diagnostico.etapas.push('ETAPA 4: Launch iniciado');
    
    let browser = null;
    let page = null;
    try {
      const startTime = Date.now();
      
      // ‚úÖ PLAYWRIGHT SYNTAX (diferente de Puppeteer)
      browser = await puppeteer.chromium.launch({
        args: [
          ...chromium.args,
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-blink-features=AutomationControlled', // ‚úÖ Remove sinais de bot
          '--disable-features=VizDisplayCompositor',
          '--disable-web-security',
          '--disable-dev-shm-usage',
          '--no-first-run',
          '--disable-extensions'
        ],
        executablePath,
        headless: chromium.headless || true,
        timeout: 15000, // 15s timeout para teste
      });
      
      const launchTime = Date.now() - startTime;
      log(`‚úÖ Browser LAN√áADO com sucesso em ${launchTime}ms`);
      diagnostico.etapas.push(`Launch: OK (${launchTime}ms)`);
      
             // ===== ETAPA 5: TESTAR P√ÅGINA =====
       log('üìÑ ETAPA 5: Testando cria√ß√£o de p√°gina...');
       diagnostico.etapas.push('ETAPA 5: P√°gina iniciado');
       
       page = await browser.newPage();
       log('‚úÖ P√°gina criada com sucesso');
       diagnostico.etapas.push('P√°gina: OK');
       
       // ===== CONFIGURA√á√ïES ANTI-DETEC√á√ÉO PLAYWRIGHT =====
       log('ü•∑ Aplicando configura√ß√µes anti-detec√ß√£o Playwright...');
       
       // Viewport realista (Playwright syntax)
       await page.setViewportSize({ width: 1366, height: 768 });
       
       // Headers realistas incluindo User-Agent (Playwright syntax)
       await page.setExtraHTTPHeaders({
         'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
         'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
         'Accept-Encoding': 'gzip, deflate, br',
         'DNT': '1',
         'Connection': 'keep-alive',
         'Upgrade-Insecure-Requests': '1'
       });
       
       // Remover flags de webdriver (Playwright syntax)
       await page.addInitScript(() => {
         Object.defineProperty(navigator, 'webdriver', {
           get: () => undefined,
         });
         delete window.navigator.webdriver;
       });
       
       log('‚úÖ Anti-detec√ß√£o Playwright aplicada');
       
              // ===== ETAPA 6: TESTAR NAVEGA√á√ÉO BLAZE =====
       log('üåê ETAPA 6: Testando navega√ß√£o para Blaze...');
       diagnostico.etapas.push('ETAPA 6: Navega√ß√£o Blaze iniciado');
       
       // Delay humano aleat√≥rio
       const humanDelay = Math.random() * 2000 + 1000; // 1-3s
       await new Promise(resolve => setTimeout(resolve, humanDelay));
       log(`‚è±Ô∏è Delay humano: ${Math.round(humanDelay)}ms`);
       
       await page.goto('https://blaze.bet.br/pt/games/double', { 
         waitUntil: 'domcontentloaded',
         timeout: 20000 
       });
      
      log('‚úÖ P√°gina Blaze carregada com sucesso');
      diagnostico.etapas.push('Navega√ß√£o Blaze: OK');
      
      // ===== ETAPA 7: VERIFICAR MODAL =====
      log('üîç ETAPA 7: Verificando se modal aparece...');
      diagnostico.etapas.push('ETAPA 7: Verifica√ß√£o modal iniciado');
      
      const pageInfo = await page.evaluate(() => {
        return {
          modalExists: document.querySelector('[class*="modal"]') !== null ||
                      document.querySelector('[data-modal]') !== null ||
                      window.location.href.includes('modal=pay_table'),
          hasGameBoard: document.querySelector('[class*="game"]') !== null,
          title: document.title,
          readyState: document.readyState,
          url: window.location.href
        };
      });
      
      log(`üìã Modal detectado: ${pageInfo.modalExists ? 'SIM' : 'N√ÉO'}`);
      log(`üìç URL atual: ${pageInfo.url}`);
      log(`üéÆ T√≠tulo: ${pageInfo.title}`);
      log(`üìä Estado: ${pageInfo.readyState}`);
      
      diagnostico.etapas.push(`Modal: ${pageInfo.modalExists ? 'DETECTADO' : 'N√ÉO DETECTADO'}`);
      diagnostico.etapas.push(`URL: ${pageInfo.url}`);
      diagnostico.etapas.push(`Estado: ${pageInfo.readyState}`);
      
      // ===== SUCESSO TOTAL =====
      log('üéâ DIAGN√ìSTICO: NAVEGA√á√ÉO BLAZE TESTADA!');
      diagnostico.sucesso = true;
      diagnostico.etapas.push('DIAGN√ìSTICO: NAVEGA√á√ÉO COMPLETA');
      
             return res.status(200).json({
         success: true,
         message: 'Chromium + Blaze testado com sucesso',
         diagnostico,
         pageInfo
       });
       
    } catch (error) {
      log(`‚ùå Launch/Navega√ß√£o ERRO: ${error.message}`);
      diagnostico.etapas.push(`ERRO: ${error.message}`);
      throw new Error(`Erro no teste: ${error.message}`);
    } finally {
      if (page) {
        try {
          await page.close();
          log('üìÑ P√°gina fechada');
        } catch (closeError) {
          log(`‚ö†Ô∏è Erro fechando p√°gina: ${closeError.message}`);
        }
      }
      
      if (browser) {
        try {
          await browser.close();
          log('üîí Browser fechado com sucesso');
        } catch (closeError) {
          log(`‚ö†Ô∏è Erro fechando browser: ${closeError.message}`);
        }
      }
    }

  } catch (error) {
    // ‚úÖ LOG DE ERRO SEMPRE (para debug)
    console.error('‚ùå DIAGN√ìSTICO FALHOU:', error.message);
    log(`‚ùå STACK: ${error.stack}`);
    
    diagnostico.erro = error.message;
    diagnostico.etapas.push(`ERRO FINAL: ${error.message}`);
    
    return res.status(500).json({
      success: false,
      error: error.message,
      diagnostico,
      stack: error.stack
    });
  }
} 