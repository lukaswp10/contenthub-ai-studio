import { test, expect } from '@playwright/test';
import { E2E_CONFIG } from '../config/test-config';

// Fun√ß√£o helper para login
const loginUser = async (page: any) => {
  await page.goto(`${E2E_CONFIG.urls.base}/login`);
  await page.waitForLoadState('networkidle');
  
  await page.fill('input[type="email"]', 'lukaswp10@gmail.com');
  await page.fill('input[type="password"]', '7pguyrxV!');
  await page.click('button[type="submit"]');
  await page.waitForURL('**/dashboard');
};

// Fun√ß√£o helper para ir ao editor
const goToEditor = async (page: any) => {
  await loginUser(page);
  await page.waitForSelector('button:has-text("Editor Manual")', { timeout: 15000 });
  await page.click('button:has-text("Editor Manual")');
  await page.waitForURL('**/editor');
  await page.waitForLoadState('networkidle');
};

test.describe('üìù ClipsForge - Sistema de Legendas e Transcri√ß√£o', () => {
  
  test('Sistema de legendas autom√°ticas - Interface', async ({ page }) => {
    console.log('üìù Testando interface de legendas autom√°ticas...');
    
    await goToEditor(page);
    
    // Verificar se existe bot√£o/painel de legendas
    const captionSelectors = [
      'button:has-text("Legendas")',
      'button:has-text("Captions")',
      'button:has-text("Transcri√ß√£o")',
      '[data-testid="captions-button"]',
      '[data-testid="transcription-button"]',
      '.caption-panel',
      '.transcription-panel'
    ];
    
    let captionElementFound = false;
    for (const selector of captionSelectors) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`‚úÖ Elemento de legendas encontrado: ${selector}`);
          captionElementFound = true;
          break;
        }
      } catch (error) {
        // Continuar procurando
      }
    }
    
    if (!captionElementFound) {
      console.log('‚ö†Ô∏è Interface de legendas n√£o encontrada - pode estar integrada');
    }
    
    // Verificar se existem controles de transcri√ß√£o
    const transcriptionControls = [
      'button:has-text("Transcrever")',
      'button:has-text("Gerar Legendas")',
      'button:has-text("Auto Caption")',
      '.transcription-controls'
    ];
    
    for (const selector of transcriptionControls) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üéØ Controle de transcri√ß√£o encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de interface de legendas conclu√≠do!');
  });

  test('Configura√ß√£o de API Keys para transcri√ß√£o', async ({ page }) => {
    console.log('üîë Testando configura√ß√£o de API Keys...');
    
    await goToEditor(page);
    
    // Procurar por bot√£o de configura√ß√µes
    const settingsSelectors = [
      'button:has-text("Configura√ß√µes")',
      'button:has-text("Settings")',
      'button:has-text("API")',
      '[data-testid="settings-button"]',
      '.settings-button',
      '.gear-icon'
    ];
    
    let settingsFound = false;
    for (const selector of settingsSelectors) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`‚öôÔ∏è Bot√£o de configura√ß√µes encontrado: ${selector}`);
          await page.click(selector);
          settingsFound = true;
          break;
        }
      } catch (error) {
        // Continuar procurando
      }
    }
    
    if (!settingsFound) {
      console.log('‚ö†Ô∏è Bot√£o de configura√ß√µes n√£o encontrado');
    }
    
    // Verificar se existe painel de API Keys
    const apiKeySelectors = [
      'input[placeholder*="API"]',
      'input[placeholder*="Key"]',
      'input[placeholder*="OpenAI"]',
      '.api-key-input',
      '[data-testid="api-key-input"]'
    ];
    
    for (const selector of apiKeySelectors) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üîë Campo de API Key encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de configura√ß√£o de API conclu√≠do!');
  });

  test('Funcionalidade de edi√ß√£o de legendas', async ({ page }) => {
    console.log('‚úèÔ∏è Testando edi√ß√£o de legendas...');
    
    await goToEditor(page);
    
    // Procurar por elementos de edi√ß√£o de legendas
    const captionEditSelectors = [
      '.caption-editor',
      '.subtitle-editor',
      '[data-testid="caption-editor"]',
      '.editable-caption',
      '.caption-text',
      '.subtitle-text'
    ];
    
    let editorFound = false;
    for (const selector of captionEditSelectors) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`‚úèÔ∏è Editor de legendas encontrado: ${selector}`);
          editorFound = true;
          break;
        }
      } catch (error) {
        // Continuar procurando
      }
    }
    
    if (!editorFound) {
      console.log('‚ö†Ô∏è Editor de legendas n√£o encontrado');
    }
    
    // Verificar controles de sincroniza√ß√£o
    const syncControls = [
      'button:has-text("Sync")',
      'button:has-text("Sincronizar")',
      '.sync-controls',
      '.timing-controls',
      '[data-testid="sync-button"]'
    ];
    
    for (const selector of syncControls) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üîÑ Controle de sincroniza√ß√£o encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de edi√ß√£o de legendas conclu√≠do!');
  });

  test('Cache e performance de transcri√ß√£o', async ({ page }) => {
    console.log('‚ö° Testando cache e performance...');
    
    await goToEditor(page);
    
    // Verificar indicadores de cache
    const cacheIndicators = [
      '.cache-stats',
      '.cache-indicator',
      '[data-testid="cache-stats"]',
      'button:has-text("Cache")',
      '.performance-stats'
    ];
    
    for (const selector of cacheIndicators) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üìä Indicador de cache encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar performance da interface
    const startTime = Date.now();
    await page.waitForSelector('body', { timeout: 5000 });
    const loadTime = Date.now() - startTime;
    
    console.log(`‚ö° Tempo de carregamento: ${loadTime}ms`);
    
    if (loadTime < 3000) {
      console.log('‚úÖ Performance adequada');
    } else {
      console.log('‚ö†Ô∏è Performance pode ser melhorada');
    }
    
    console.log('‚úÖ Teste de cache e performance conclu√≠do!');
  });

  test('Integra√ß√£o com servi√ßos de transcri√ß√£o', async ({ page }) => {
    console.log('üîå Testando integra√ß√£o com servi√ßos...');
    
    await goToEditor(page);
    
    // Verificar indicadores de servi√ßos
    const serviceIndicators = [
      '.service-status',
      '.api-status',
      '.connection-status',
      '[data-testid="service-status"]',
      'button:has-text("Conectado")',
      'button:has-text("Desconectado")'
    ];
    
    for (const selector of serviceIndicators) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üîå Indicador de servi√ßo encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar se h√° mensagens de erro ou sucesso
    const statusMessages = [
      '.error-message',
      '.success-message',
      '.warning-message',
      '.status-message',
      '.alert'
    ];
    
    for (const selector of statusMessages) {
      try {
        const elements = await page.$$(selector);
        if (elements.length > 0) {
          console.log(`üì® ${elements.length} mensagem(ns) de status encontrada(s)`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de integra√ß√£o com servi√ßos conclu√≠do!');
  });

  test('Exporta√ß√£o com legendas', async ({ page }) => {
    console.log('üì§ Testando exporta√ß√£o com legendas...');
    
    await goToEditor(page);
    
    // Procurar bot√£o de exporta√ß√£o
    const exportSelectors = [
      'button:has-text("Exportar")',
      'button:has-text("Export")',
      'button:has-text("Download")',
      '[data-testid="export-button"]',
      '.export-button'
    ];
    
    let exportFound = false;
    for (const selector of exportSelectors) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üì§ Bot√£o de exporta√ß√£o encontrado: ${selector}`);
          exportFound = true;
          break;
        }
      } catch (error) {
        // Continuar procurando
      }
    }
    
    if (!exportFound) {
      console.log('‚ö†Ô∏è Bot√£o de exporta√ß√£o n√£o encontrado');
    }
    
    // Verificar op√ß√µes de exporta√ß√£o com legendas
    const captionExportOptions = [
      'input[type="checkbox"]:has-text("Legendas")',
      'input[type="checkbox"]:has-text("Captions")',
      'input[type="checkbox"]:has-text("Subtitles")',
      '.export-options',
      '.caption-export-option'
    ];
    
    for (const selector of captionExportOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`‚úÖ Op√ß√£o de exporta√ß√£o com legendas encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de exporta√ß√£o com legendas conclu√≠do!');
  });

}); 