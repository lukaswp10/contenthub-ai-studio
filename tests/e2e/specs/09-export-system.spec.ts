import { test, expect } from '@playwright/test';
import { E2E_CONFIG } from '../config/test-config';

// Fun√ß√£o helper para login
const loginUser = async (page: any) => {
  await page.goto(`${E2E_CONFIG.urls.base}/login`);
  await page.waitForLoadState('networkidle');
  
  await page.fill('input[type="email"]', 'lukaswp10@gmail.com');
  await page.fill('input[type="password"]', '7pguyrxV!');
  await page.click('button[type="submit"]');
  await page.waitForURL('**/dashboard');
};

// Fun√ß√£o helper para ir ao editor
const goToEditor = async (page: any) => {
  await loginUser(page);
  await page.waitForSelector('button:has-text("Editor Manual")', { timeout: 15000 });
  await page.click('button:has-text("Editor Manual")');
  await page.waitForURL('**/editor');
  await page.waitForLoadState('networkidle');
};

test.describe('üì§ ClipsForge - Sistema de Exporta√ß√£o', () => {
  
  test('Interface de exporta√ß√£o e configura√ß√µes', async ({ page }) => {
    console.log('üì§ Testando interface de exporta√ß√£o...');
    
    await goToEditor(page);
    
    // Verificar bot√µes de exporta√ß√£o
    const exportButtons = [
      'button:has-text("Exportar")',
      'button:has-text("Export")',
      'button:has-text("Download")',
      'button:has-text("Render")',
      '[data-testid="export-button"]',
      '.export-button',
      '.download-button'
    ];
    
    let exportFound = false;
    for (const selector of exportButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üì§ Bot√£o de exporta√ß√£o encontrado: ${selector}`);
          exportFound = true;
          
          // Tentar clicar no bot√£o
          try {
            await page.click(selector);
            console.log(`‚úÖ Bot√£o de exporta√ß√£o clicado`);
          } catch (error) {
            console.log(`‚ö†Ô∏è Erro ao clicar no bot√£o: ${error}`);
          }
          break;
        }
      } catch (error) {
        // Continuar procurando
      }
    }
    
    if (!exportFound) {
      console.log('‚ö†Ô∏è Bot√£o de exporta√ß√£o n√£o encontrado');
    }
    
    // Verificar modal ou painel de exporta√ß√£o
    const exportPanels = [
      '.export-modal',
      '.export-panel',
      '.render-modal',
      '.download-modal',
      '[data-testid="export-modal"]',
      '.export-settings'
    ];
    
    for (const selector of exportPanels) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üéõÔ∏è Painel de exporta√ß√£o encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de interface de exporta√ß√£o conclu√≠do!');
  });

  test('Configura√ß√µes de qualidade e formato', async ({ page }) => {
    console.log('üé• Testando configura√ß√µes de qualidade...');
    
    await goToEditor(page);
    
    // Procurar e clicar no bot√£o de exporta√ß√£o
    const exportButtons = [
      'button:has-text("Exportar")',
      'button:has-text("Export")',
      '[data-testid="export-button"]'
    ];
    
    for (const selector of exportButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          await page.click(selector);
          break;
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Aguardar modal aparecer
    await page.waitForTimeout(1000);
    
    // Verificar op√ß√µes de qualidade
    const qualityOptions = [
      'select[name="quality"]',
      'input[value="720p"]',
      'input[value="1080p"]',
      'input[value="4K"]',
      '.quality-selector',
      '.resolution-options'
    ];
    
    for (const selector of qualityOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üé• Op√ß√£o de qualidade encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar formatos de arquivo
    const formatOptions = [
      'select[name="format"]',
      'input[value="mp4"]',
      'input[value="webm"]',
      'input[value="mov"]',
      '.format-selector',
      '.file-format-options'
    ];
    
    for (const selector of formatOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üìÅ Op√ß√£o de formato encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de configura√ß√µes de qualidade conclu√≠do!');
  });

  test('Op√ß√µes de exporta√ß√£o avan√ßadas', async ({ page }) => {
    console.log('‚öôÔ∏è Testando op√ß√µes avan√ßadas de exporta√ß√£o...');
    
    await goToEditor(page);
    
    // Tentar abrir modal de exporta√ß√£o
    const exportButtons = [
      'button:has-text("Exportar")',
      'button:has-text("Export")'
    ];
    
    for (const selector of exportButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          await page.click(selector);
          break;
        }
      } catch (error) {
        // Continuar
      }
    }
    
    await page.waitForTimeout(1000);
    
    // Verificar op√ß√µes de legendas
    const captionOptions = [
      'input[type="checkbox"]:has-text("Legendas")',
      'input[type="checkbox"]:has-text("Captions")',
      'input[type="checkbox"]:has-text("Subtitles")',
      '.caption-export-option',
      '.subtitle-option'
    ];
    
    for (const selector of captionOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üìù Op√ß√£o de legendas encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar op√ß√µes de √°udio
    const audioOptions = [
      'select[name="audio"]',
      'input[type="checkbox"]:has-text("Audio")',
      '.audio-options',
      '.audio-export-settings'
    ];
    
    for (const selector of audioOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üîä Op√ß√£o de √°udio encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar configura√ß√µes de compress√£o
    const compressionOptions = [
      'input[name="bitrate"]',
      'select[name="compression"]',
      '.compression-settings',
      '.bitrate-options'
    ];
    
    for (const selector of compressionOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üóúÔ∏è Op√ß√£o de compress√£o encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de op√ß√µes avan√ßadas conclu√≠do!');
  });

  test('Processo de renderiza√ß√£o e progresso', async ({ page }) => {
    console.log('üîÑ Testando processo de renderiza√ß√£o...');
    
    await goToEditor(page);
    
    // Tentar iniciar exporta√ß√£o
    const exportButtons = [
      'button:has-text("Exportar")',
      'button:has-text("Export")'
    ];
    
    let exportStarted = false;
    for (const selector of exportButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          await page.click(selector);
          await page.waitForTimeout(1000);
          
          // Procurar bot√£o de confirmar/iniciar
          const confirmButtons = [
            'button:has-text("Confirmar")',
            'button:has-text("Iniciar")',
            'button:has-text("Start")',
            'button:has-text("Render")',
            '[data-testid="confirm-export"]'
          ];
          
          for (const confirmSelector of confirmButtons) {
            try {
              const confirmElement = await page.$(confirmSelector);
              if (confirmElement) {
                await page.click(confirmSelector);
                exportStarted = true;
                console.log(`üöÄ Exporta√ß√£o iniciada`);
                break;
              }
            } catch (error) {
              // Continuar
            }
          }
          break;
        }
      } catch (error) {
        // Continuar
      }
    }
    
    if (!exportStarted) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel iniciar a exporta√ß√£o');
    }
    
    // Verificar indicadores de progresso
    const progressIndicators = [
      '.progress-bar',
      '.progress-indicator',
      '.render-progress',
      '.export-progress',
      '[data-testid="export-progress"]',
      '.loading-spinner'
    ];
    
    for (const selector of progressIndicators) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üìä Indicador de progresso encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar mensagens de status
    const statusMessages = [
      '.status-message',
      '.render-status',
      '.export-status',
      '.progress-text'
    ];
    
    for (const selector of statusMessages) {
      try {
        const element = await page.$(selector);
        if (element) {
          const text = await element.textContent();
          console.log(`üì® Status encontrado: ${text}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de processo de renderiza√ß√£o conclu√≠do!');
  });

  test('Download e finaliza√ß√£o da exporta√ß√£o', async ({ page }) => {
    console.log('‚¨áÔ∏è Testando download e finaliza√ß√£o...');
    
    await goToEditor(page);
    
    // Simular processo de exporta√ß√£o (aguardar elementos)
    await page.waitForTimeout(2000);
    
    // Verificar bot√µes de download
    const downloadButtons = [
      'button:has-text("Download")',
      'button:has-text("Baixar")',
      'a[download]',
      '.download-link',
      '[data-testid="download-button"]'
    ];
    
    for (const selector of downloadButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`‚¨áÔ∏è Bot√£o de download encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar mensagens de sucesso
    const successMessages = [
      '.success-message',
      '.export-complete',
      '.render-complete',
      'text="Exporta√ß√£o conclu√≠da"',
      'text="Export complete"'
    ];
    
    for (const selector of successMessages) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`‚úÖ Mensagem de sucesso encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar op√ß√µes p√≥s-exporta√ß√£o
    const postExportOptions = [
      'button:has-text("Nova Exporta√ß√£o")',
      'button:has-text("Compartilhar")',
      'button:has-text("Salvar Projeto")',
      '.post-export-actions',
      '.share-options'
    ];
    
    for (const selector of postExportOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üéØ Op√ß√£o p√≥s-exporta√ß√£o encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de download e finaliza√ß√£o conclu√≠do!');
  });

  test('Tratamento de erros na exporta√ß√£o', async ({ page }) => {
    console.log('‚ùå Testando tratamento de erros...');
    
    await goToEditor(page);
    
    // Verificar mensagens de erro
    const errorMessages = [
      '.error-message',
      '.export-error',
      '.render-error',
      'text="Erro na exporta√ß√£o"',
      'text="Export failed"',
      '.alert-error'
    ];
    
    for (const selector of errorMessages) {
      try {
        const element = await page.$(selector);
        if (element) {
          const text = await element.textContent();
          console.log(`‚ùå Mensagem de erro encontrada: ${text}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar bot√µes de retry
    const retryButtons = [
      'button:has-text("Tentar Novamente")',
      'button:has-text("Retry")',
      'button:has-text("Repetir")',
      '.retry-button',
      '[data-testid="retry-button"]'
    ];
    
    for (const selector of retryButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üîÑ Bot√£o de retry encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Verificar cancelamento
    const cancelButtons = [
      'button:has-text("Cancelar")',
      'button:has-text("Cancel")',
      'button:has-text("Parar")',
      '.cancel-button',
      '[data-testid="cancel-button"]'
    ];
    
    for (const selector of cancelButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`‚èπÔ∏è Bot√£o de cancelar encontrado: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de tratamento de erros conclu√≠do!');
  });

  test('Performance e otimiza√ß√£o da exporta√ß√£o', async ({ page }) => {
    console.log('‚ö° Testando performance da exporta√ß√£o...');
    
    await goToEditor(page);
    
    // Medir tempo de carregamento da interface de exporta√ß√£o
    const startTime = Date.now();
    
    // Tentar abrir modal de exporta√ß√£o
    const exportButtons = [
      'button:has-text("Exportar")',
      'button:has-text("Export")'
    ];
    
    for (const selector of exportButtons) {
      try {
        const element = await page.$(selector);
        if (element) {
          await page.click(selector);
          break;
        }
      } catch (error) {
        // Continuar
      }
    }
    
    // Aguardar modal aparecer
    await page.waitForTimeout(1000);
    
    const loadTime = Date.now() - startTime;
    console.log(`‚ö° Tempo de carregamento da exporta√ß√£o: ${loadTime}ms`);
    
    if (loadTime < 2000) {
      console.log('‚úÖ Performance da exporta√ß√£o adequada');
    } else {
      console.log('‚ö†Ô∏è Performance da exporta√ß√£o pode ser melhorada');
    }
    
    // Verificar otimiza√ß√µes
    const optimizationOptions = [
      'input[type="checkbox"]:has-text("Otimizar")',
      'input[type="checkbox"]:has-text("Compress")',
      '.optimization-options',
      '.performance-settings'
    ];
    
    for (const selector of optimizationOptions) {
      try {
        const element = await page.$(selector);
        if (element) {
          console.log(`üöÄ Op√ß√£o de otimiza√ß√£o encontrada: ${selector}`);
        }
      } catch (error) {
        // Continuar
      }
    }
    
    console.log('‚úÖ Teste de performance conclu√≠do!');
  });

}); 