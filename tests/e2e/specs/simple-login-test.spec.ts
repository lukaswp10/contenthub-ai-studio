import { test, expect } from '@playwright/test';

test.describe('üîê Teste Simples de Login - Produ√ß√£o', () => {
  
  test('Login direto e verificar redirecionamento para dashboard', async ({ page }) => {
    console.log('üåê Testando login direto em produ√ß√£o...');
    
    // Ir diretamente para a p√°gina de login em produ√ß√£o
    await page.goto('https://clipsforge.vercel.app/login');
    console.log('üìç Navegou para: https://clipsforge.vercel.app/login');
    
    // Aguardar p√°gina carregar completamente
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000);
    
    // Verificar se estamos na p√°gina de login
    expect(page.url()).toContain('/login');
    console.log('‚úÖ Confirmado: estamos na p√°gina de login');
    
    // Aguardar elementos do formul√°rio aparecerem
    await page.waitForSelector('input[type="email"]', { timeout: 30000 });
    await page.waitForSelector('input[type="password"]', { timeout: 30000 });
    await page.waitForSelector('form button[type="submit"]', { timeout: 30000 });
    console.log('‚úÖ Elementos do formul√°rio encontrados');
    
    // Preencher credenciais
    console.log('üìù Preenchendo credenciais...');
    await page.fill('input[type="email"]', 'lukaswp10@gmail.com');
    await page.fill('input[type="password"]', '7pguyrxV!');
    
    // Aguardar bot√£o de login do formul√°rio ficar habilitado
    await page.waitForSelector('form button[type="submit"]:not([disabled])', { timeout: 15000 });
    console.log('‚úÖ Bot√£o de login habilitado');
    
    // Fazer screenshot antes do login para debug
    await page.screenshot({ path: 'test-results/before-login.png', fullPage: true });
    
    // Clicar no bot√£o de login correto (do formul√°rio)
    console.log('üîë Clicando no bot√£o de login do formul√°rio...');
    await page.click('form button[type="submit"]');
    
    // Aguardar redirecionamento (tempo maior para produ√ß√£o)
    console.log('‚è≥ Aguardando redirecionamento...');
    await page.waitForLoadState('networkidle', { timeout: 60000 });
    await page.waitForTimeout(3000); // Aguardar processamento adicional
    
    // Verificar URL atual
    const currentUrl = page.url();
    console.log(`üìç URL atual ap√≥s login: ${currentUrl}`);
    
    // Fazer screenshot ap√≥s login para debug
    await page.screenshot({ path: 'test-results/after-login.png', fullPage: true });
    
    // Verificar se n√£o est√° mais na p√°gina de login
    expect(currentUrl).not.toContain('/login');
    console.log('‚úÖ N√£o est√° mais na p√°gina de login');
    
    // Verificar se foi redirecionado para dashboard
    if (currentUrl.includes('/dashboard')) {
      console.log('üéâ SUCESSO: Redirecionado para dashboard!');
      expect(currentUrl).toContain('/dashboard');
    } else {
      console.log(`‚ÑπÔ∏è Redirecionado para: ${currentUrl}`);
      // Se n√£o foi para dashboard, pelo menos n√£o deve estar em login
      expect(currentUrl).not.toContain('/login');
    }
    
    // Verificar se h√° elementos de uma p√°gina autenticada
    const pageContent = await page.textContent('body');
    console.log(`üìÑ Conte√∫do da p√°gina (primeiros 100 chars): ${pageContent?.substring(0, 100)}...`);
    
    console.log('‚úÖ Teste de login conclu√≠do com sucesso!');
  });
}); 