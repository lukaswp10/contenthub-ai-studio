import { test, expect } from '@playwright/test';
import { E2E_CONFIG } from '../config/test-config';

test.describe('üì§ ClipsForge - Upload', () => {
  
  // Helper para fazer login
  const loginUser = async (page: any) => {
    await page.goto(`${E2E_CONFIG.urls.base}/login`);
    await page.waitForLoadState('networkidle');
    
    await page.fill('input[type="email"]', 'lukaswp10@gmail.com');
    await page.fill('input[type="password"]', '7pguyrxV!');
    await page.waitForSelector('form button[type="submit"]:not([disabled])', { timeout: 15000 });
    await page.click('form button[type="submit"]');
    
    await page.waitForLoadState('networkidle', { timeout: 60000 });
    await page.waitForTimeout(3000);
  };
  
  test('P√°gina de upload redireciona para dashboard', async ({ page }) => {
    console.log('üì§ Testando redirecionamento de upload...');
    
    await loginUser(page);
    
    // Navegar para /upload
    await page.goto(`${E2E_CONFIG.urls.base}/upload`);
    await page.waitForLoadState('networkidle');
    
    // Verificar que foi redirecionado para dashboard
    const currentUrl = page.url();
    expect(currentUrl).toContain('/dashboard');
    console.log(`üìç Redirecionado para: ${currentUrl}`);
    
    console.log('‚úÖ Redirecionamento funcionando corretamente!');
  });
  
  test('Se√ß√£o de upload r√°pido no dashboard', async ({ page }) => {
    console.log('üì§ Testando se√ß√£o de upload r√°pido...');
    
    await loginUser(page);
    
    // Verificar t√≠tulo da se√ß√£o
    await expect(page.locator('h2:has-text("üì§ Upload R√°pido")')).toBeVisible();
    
    // Verificar √°rea de upload
    const uploadArea = page.locator('div').filter({ hasText: 'Arraste e solte' }).first();
    await expect(uploadArea).toBeVisible();
    
    // Verificar texto de instru√ß√µes
    await expect(page.locator('text=Arraste e solte ou clique para selecionar')).toBeVisible();
    
    console.log('‚úÖ Se√ß√£o de upload r√°pido verificada!');
  });
  
  test('Bot√µes de upload no dashboard', async ({ page }) => {
    console.log('üîò Testando bot√µes de upload...');
    
    await loginUser(page);
    
    // Verificar bot√£o de upload na galeria
    const uploadButton = page.locator('button:has-text("Upload")').first();
    await expect(uploadButton).toBeVisible();
    
    // Verificar bot√£o "Fazer Upload" se galeria estiver vazia
    const makeUploadButton = page.locator('button:has-text("Fazer Upload")');
    const hasUploadButton = await makeUploadButton.count() > 0;
    
    if (hasUploadButton) {
      await expect(makeUploadButton).toBeVisible();
      console.log('üìÅ Bot√£o "Fazer Upload" encontrado (galeria vazia)');
    } else {
      console.log('üìÅ Galeria com conte√∫do, bot√£o "Upload" dispon√≠vel');
    }
    
    console.log('‚úÖ Bot√µes de upload verificados!');
  });
  
  test('Upload de arquivo - interface b√°sica', async ({ page }) => {
    console.log('üìÅ Testando interface de upload...');
    
    await loginUser(page);
    
    // Verificar se h√° input de arquivo
    const fileInput = page.locator('input[type="file"]');
    await expect(fileInput).toBeAttached();
    
    // Verificar se aceita tipos de v√≠deo
    const acceptAttr = await fileInput.getAttribute('accept');
    if (acceptAttr) {
      expect(acceptAttr).toContain('video');
      console.log(`üìπ Aceita tipos de arquivo: ${acceptAttr}`);
    }
    
    // Verificar √°rea de drag & drop
    const dropArea = page.locator('[data-testid="upload-area"], .upload-area, div').filter({ hasText: 'Arraste e solte' }).first();
    await expect(dropArea).toBeVisible();
    
    console.log('‚úÖ Interface de upload verificada!');
  });
  
  test('Navega√ß√£o para upload via bot√µes', async ({ page }) => {
    console.log('üß≠ Testando navega√ß√£o para upload...');
    
    await loginUser(page);
    
    // Tentar clicar no bot√£o de upload da galeria
    const uploadButton = page.locator('button:has-text("Upload")').first();
    if (await uploadButton.count() > 0) {
      await uploadButton.click();
      await page.waitForLoadState('networkidle');
      
      // Verificar se permaneceu no dashboard (comportamento esperado)
      const currentUrl = page.url();
      expect(currentUrl).toContain('/dashboard');
      console.log('üìç Bot√£o de upload mant√©m no dashboard (correto)');
    }
    
    // Tentar bot√£o "Fazer Upload" se existir
    const makeUploadButton = page.locator('button:has-text("Fazer Upload")');
    if (await makeUploadButton.count() > 0) {
      await makeUploadButton.click();
      await page.waitForLoadState('networkidle');
      
      const currentUrl = page.url();
      expect(currentUrl).toContain('/dashboard');
      console.log('üìç Bot√£o "Fazer Upload" redireciona para dashboard (correto)');
    }
    
    console.log('‚úÖ Navega√ß√£o para upload verificada!');
  });
  
  test('Verificar estado inicial da galeria', async ({ page }) => {
    console.log('üìÅ Testando estado inicial da galeria...');
    
    await loginUser(page);
    
    // Aguardar carregamento completo
    await page.waitForTimeout(2000);
    
    // Verificar se h√° conte√∫do na galeria
    const hasVideos = await page.locator('button:has-text("Editar")').count() > 0;
    const hasEmptyState = await page.locator('text=Comece fazendo upload de um v√≠deo').count() > 0;
    
    if (hasVideos) {
      console.log('üìπ Galeria tem v√≠deos - verificando controles');
      
      // Verificar controles de busca
      const searchInput = page.locator('input[placeholder="Buscar v√≠deos..."]');
      await expect(searchInput).toBeVisible();
      
      // Verificar bot√µes de a√ß√£o
      const editButtons = page.locator('button:has-text("Editar")');
      await expect(editButtons.first()).toBeVisible();
      
    } else if (hasEmptyState) {
      console.log('üìÅ Galeria vazia - verificando estado inicial');
      
      // Verificar mensagem de estado vazio
      await expect(page.locator('text=Comece fazendo upload de um v√≠deo')).toBeVisible();
      
      // Verificar bot√£o de upload
      await expect(page.locator('button:has-text("Fazer Upload")')).toBeVisible();
    }
    
    console.log('‚úÖ Estado inicial da galeria verificado!');
  });
  
}); 