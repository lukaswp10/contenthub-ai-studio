#!/bin/bash

echo "üé¨ Testando Upload Real de V√≠deo + Gera√ß√£o de Clips"
echo "=================================================="

# Configura√ß√µes de produ√ß√£o
SUPABASE_URL="https://rgwbtdzdeibobuveegfp.supabase.co"
ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJnd2J0ZHpkZWlib2J1dmVlZ2ZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAwNjczNDIsImV4cCI6MjA2NTY0MzM0Mn0.f3ZdePT5fk6EuO-eP4fu4EBCN97V3mNxYAKU39sduGw"

# Arquivo de v√≠deo
VIDEO_FILE="/home/lucasmartins/Downloads/videoplayback (1).mp4"

if [ ! -f "$VIDEO_FILE" ]; then
    echo "‚ùå Arquivo de v√≠deo n√£o encontrado: $VIDEO_FILE"
    exit 1
fi

echo "üìπ Arquivo encontrado: $(basename "$VIDEO_FILE")"
echo "üìä Tamanho: $(ls -lh "$VIDEO_FILE" | awk '{print $5}')"

echo ""
echo "üîê 1. Testando autentica√ß√£o..."

# Primeiro, vamos fazer login para obter um token v√°lido
LOGIN_DATA='{
  "email": "lukaswp10@gmail.com",
  "password": "7pguyrxV!"
}'

echo "üì§ Fazendo login..."

LOGIN_RESPONSE=$(curl -s -X POST \
  "$SUPABASE_URL/auth/v1/token?grant_type=password" \
  -H "apikey: $ANON_KEY" \
  -H "Content-Type: application/json" \
  -d "$LOGIN_DATA")

echo "üì• Resposta do login:"
echo "$LOGIN_RESPONSE" | jq '.' 2>/dev/null || echo "$LOGIN_RESPONSE"

# Extrair token de acesso
ACCESS_TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.access_token // empty' 2>/dev/null)

if [ -z "$ACCESS_TOKEN" ]; then
    echo "‚ùå Erro ao obter token de acesso"
    echo "Tentando com token an√¥nimo..."
    ACCESS_TOKEN="$ANON_KEY"
else
    echo "‚úÖ Token obtido com sucesso"
fi

echo ""
echo "üì§ 2. Testando upload com arquivo real..."

# Primeiro, enviar metadados para criar o registro
METADATA='{
  "fileName": "videoplayback.mp4",
  "fileSize": 2574521,
  "contentType": "video/mp4",
  "duration": 60
}'

echo "üìã Enviando metadados do v√≠deo..."

UPLOAD_RESPONSE=$(curl -s -X POST \
  "$SUPABASE_URL/functions/v1/upload-video" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$METADATA")

echo "üì• Resposta do upload de metadados:"
echo "$UPLOAD_RESPONSE" | jq '.' 2>/dev/null || echo "$UPLOAD_RESPONSE"

# Extrair video_id
VIDEO_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.video_id // empty' 2>/dev/null)

if [ -z "$VIDEO_ID" ]; then
    echo "‚ùå Erro ao obter video_id. Abortando."
    exit 1
fi

echo "‚úÖ Video ID obtido: $VIDEO_ID"

# URL de v√≠deo p√∫blica para teste
# Usaremos esta URL fixa para garantir que a transcri√ß√£o funcione.
# Em um cen√°rio real, esta URL viria do processo de upload do Cloudinary.
DEMO_VIDEO_URL="https://res.cloudinary.com/dyqjxsnjp/video/upload/v1750937537/samples/elephants.mp4"
echo "üêò Usando URL de v√≠deo de demonstra√ß√£o para transcri√ß√£o: $DEMO_VIDEO_URL"

echo ""
echo "üéØ 3. Testando transcri√ß√£o de √°udio..."

# Montar o payload para a fun√ß√£o de transcri√ß√£o
TRANSCRIBE_DATA='{
  "video_id": "'$VIDEO_ID'",
  "cloudinary_url": "'$DEMO_VIDEO_URL'"
}'

echo "üì§ Testando fun√ß√£o de transcri√ß√£o com URL de demonstra√ß√£o..."

TRANSCRIBE_RESPONSE=$(curl -s -X POST \
  "$SUPABASE_URL/functions/v1/transcribe-video" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$TRANSCRIBE_DATA")

echo "üì• Resposta da transcri√ß√£o:"
echo "$TRANSCRIBE_RESPONSE" | jq '.' 2>/dev/null || echo "$TRANSCRIBE_RESPONSE"

echo ""
echo "üß† 4. Testando an√°lise de conte√∫do..."

ANALYZE_DATA='{
  "video_id": "'$VIDEO_ID'",
  "transcript": "Este √© um v√≠deo de teste para demonstrar o sistema de gera√ß√£o de clips autom√°ticos. O conte√∫do inclui explica√ß√µes sobre tecnologia e inova√ß√£o."
}'

echo "üì§ Testando fun√ß√£o de an√°lise..."

ANALYZE_RESPONSE=$(curl -s -X POST \
  "$SUPABASE_URL/functions/v1/analyze-content" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$ANALYZE_DATA")

echo "üì• Resposta da an√°lise:"
echo "$ANALYZE_RESPONSE" | jq '.' 2>/dev/null || echo "$ANALYZE_RESPONSE"

echo ""
echo "‚úÇÔ∏è 5. Testando gera√ß√£o de clips..."

GENERATE_DATA='{
  "video_id": "'$VIDEO_ID'",
  "analysis_data": {
    "transcript": "Este √© um v√≠deo de teste para demonstrar o sistema de gera√ß√£o de clips autom√°ticos. O conte√∫do inclui explica√ß√µes sobre tecnologia e inova√ß√£o que podem se tornar virais nas redes sociais.",
    "key_moments": [
      {
        "start_time": 5,
        "end_time": 35,
        "description": "Explica√ß√£o sobre tecnologia inovadora",
        "confidence": 0.9,
        "topics": ["tecnologia", "inova√ß√£o"]
      },
      {
        "start_time": 20,
        "end_time": 50,
        "description": "Momento viral sobre redes sociais",
        "confidence": 0.8,
        "topics": ["social media", "viral"]
      }
    ],
    "sentiment": "positive",
    "engagement_score": 0.85
  },
  "preferences": {
    "platforms": ["tiktok", "instagram"],
    "max_clips": 2,
    "min_duration": 15,
    "max_duration": 45
  }
}'

echo "üì§ Gerando clips com dados reais..."

CLIPS_RESPONSE=$(curl -s -X POST \
  "$SUPABASE_URL/functions/v1/generate-clips" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$GENERATE_DATA")

echo "üì• Resposta da gera√ß√£o de clips:"
echo "$CLIPS_RESPONSE" | jq '.' 2>/dev/null || echo "$CLIPS_RESPONSE"

echo ""
echo "üîç 6. Analisando erros espec√≠ficos..."

# Verificar tipos de erro
if echo "$CLIPS_RESPONSE" | grep -q "error"; then
    echo "‚ùå Erro detectado na gera√ß√£o de clips:"
    
    # Extrair mensagem de erro espec√≠fica
    ERROR_MSG=$(echo "$CLIPS_RESPONSE" | jq -r '.error // .message // empty' 2>/dev/null)
    ERROR_CODE=$(echo "$CLIPS_RESPONSE" | jq -r '.code // empty' 2>/dev/null)
    
    echo "   Mensagem: $ERROR_MSG"
    echo "   C√≥digo: $ERROR_CODE"
    
    # Analisar tipo de erro
    if echo "$ERROR_MSG" | grep -qi "jwt\|token\|auth"; then
        echo "üîê Problema de autentica√ß√£o detectado"
    elif echo "$ERROR_MSG" | grep -qi "video.*not.*found\|uuid"; then
        echo "üìπ Problema com ID do v√≠deo"
    elif echo "$ERROR_MSG" | grep -qi "shotstack\|api"; then
        echo "üé¨ Problema com API externa (Shotstack)"
    elif echo "$ERROR_MSG" | grep -qi "database\|sql"; then
        echo "üóÑÔ∏è Problema de banco de dados"
    else
        echo "‚ùì Erro n√£o categorizado"
    fi
    
else
    echo "‚úÖ Gera√ß√£o de clips funcionando!"
    
    # Verificar se tem dados estruturados
    if echo "$CLIPS_RESPONSE" | grep -q "timeline"; then
        echo "‚úÖ Timeline estruturada presente"
    fi
    
    if echo "$CLIPS_RESPONSE" | grep -q "tracks"; then
        echo "‚úÖ Sistema de tracks funcionando"
    fi
    
    if echo "$CLIPS_RESPONSE" | grep -q "shotstack"; then
        echo "‚úÖ Integra√ß√£o Shotstack ativa"
    fi
fi

echo ""
echo "üìä 7. Resumo do teste:"
echo "   Video ID: $VIDEO_ID"
echo "   Arquivo: $(basename "$VIDEO_FILE")"
echo "   Tamanho: $(ls -lh "$VIDEO_FILE" | awk '{print $5}')"

# Status de cada etapa
if echo "$UPLOAD_RESPONSE" | grep -q "success"; then
    echo "   ‚úÖ Upload: OK"
else
    echo "   ‚ùå Upload: ERRO"
fi

if echo "$TRANSCRIBE_RESPONSE" | grep -q "success\|transcript"; then
    echo "   ‚úÖ Transcri√ß√£o: OK"
else
    echo "   ‚ö†Ô∏è Transcri√ß√£o: Limitada"
fi

if echo "$ANALYZE_RESPONSE" | grep -q "success\|analysis"; then
    echo "   ‚úÖ An√°lise: OK"
else
    echo "   ‚ö†Ô∏è An√°lise: Limitada"
fi

if echo "$CLIPS_RESPONSE" | grep -q "success\|clips"; then
    echo "   ‚úÖ Gera√ß√£o: OK"
else
    echo "   ‚ùå Gera√ß√£o: ERRO"
fi

echo ""
echo "üéâ Teste completo finalizado!" 