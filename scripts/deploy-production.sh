#!/bin/bash

# üöÄ ClipsForge - Deploy em Produ√ß√£o
# Script automatizado para deploy completo

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${PURPLE}üöÄ ClipsForge - Deploy em Produ√ß√£o${NC}"
echo -e "${BLUE}================================${NC}"

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Execute este script na raiz do projeto ClipsForge${NC}"
    exit 1
fi

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

# 1. Verificar depend√™ncias
log "üîç Verificando depend√™ncias..."

# Verificar se o Supabase CLI est√° instalado
if ! command -v supabase &> /dev/null; then
    error "Supabase CLI n√£o est√° instalado"
    echo "Instale com: npm install -g supabase"
    exit 1
fi

# Verificar se o Node.js est√° na vers√£o correta
NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt "18" ]; then
    error "Node.js vers√£o 18+ √© necess√°ria. Vers√£o atual: $(node --version)"
    exit 1
fi

log "‚úÖ Depend√™ncias verificadas"

# 2. Configurar vari√°veis de ambiente
log "‚öôÔ∏è Verificando configura√ß√µes de produ√ß√£o..."

# Verificar se as vari√°veis essenciais est√£o definidas
REQUIRED_VARS=(
    "VITE_SUPABASE_URL"
    "VITE_SUPABASE_ANON_KEY"
    "VITE_CLOUDINARY_CLOUD_NAME"
)

MISSING_VARS=()
for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        MISSING_VARS+=("$var")
    fi
done

if [ ${#MISSING_VARS[@]} -gt 0 ]; then
    error "As seguintes vari√°veis de ambiente s√£o obrigat√≥rias:"
    printf '%s\n' "${MISSING_VARS[@]}"
    echo ""
    echo "Configure-as no arquivo .env ou como vari√°veis de ambiente do sistema"
    exit 1
fi

log "‚úÖ Configura√ß√µes verificadas"

# 3. Executar testes
log "üß™ Executando testes..."

if npm run test &> /dev/null; then
    log "‚úÖ Todos os testes passaram"
else
    warning "‚ö†Ô∏è Alguns testes falharam, mas continuando o deploy"
fi

# 4. Build da aplica√ß√£o
log "üèóÔ∏è Fazendo build da aplica√ß√£o..."

if npm run build; then
    log "‚úÖ Build conclu√≠do com sucesso"
else
    error "‚ùå Falha no build da aplica√ß√£o"
    exit 1
fi

# 5. Deploy das Edge Functions
log "üîß Fazendo deploy das Edge Functions..."

# Verificar se est√° logado no Supabase
if ! supabase projects list &> /dev/null; then
    warning "‚ö†Ô∏è N√£o est√° logado no Supabase. Fa√ßa login primeiro:"
    echo "supabase login"
    exit 1
fi

# Deploy das functions
FUNCTIONS=(
    "upload-video"
    "transcribe-video"
    "analyze-content"
    "generate-clips"
    "regenerate-clips"
    "generate-reels"
    "schedule-post"
    "connect-social-account"
    "refresh-social-account"
    "create-checkout"
    "customer-portal"
    "complete-oauth"
    "check-subscription"
)

echo "üì¶ Fazendo deploy de ${#FUNCTIONS[@]} functions..."

for func in "${FUNCTIONS[@]}"; do
    log "üöÄ Deploying $func..."
    if supabase functions deploy "$func" --no-verify-jwt; then
        log "‚úÖ $func deployed"
    else
        error "‚ùå Falha no deploy de $func"
        exit 1
    fi
done

# 6. Configurar secrets no Supabase
log "üîê Configurando secrets no Supabase..."

# Lista de secrets que devem ser configurados
SECRETS=(
    "CLOUDINARY_CLOUD_NAME"
    "CLOUDINARY_API_KEY"
    "CLOUDINARY_API_SECRET"
    "GROQ_API_KEY"
    "HUGGINGFACE_API_KEY"
    "STRIPE_SECRET_KEY"
    "STRIPE_WEBHOOK_SECRET"
)

echo "üîë Verificando ${#SECRETS[@]} secrets..."

for secret in "${SECRETS[@]}"; do
    if [ -n "${!secret}" ]; then
        log "üîê Configurando $secret..."
        if echo "${!secret}" | supabase secrets set "$secret"; then
            log "‚úÖ $secret configurado"
        else
            warning "‚ö†Ô∏è Falha ao configurar $secret"
        fi
    else
        warning "‚ö†Ô∏è $secret n√£o definido"
    fi
done

# 7. Aplicar migra√ß√µes do banco
log "üóÑÔ∏è Aplicando migra√ß√µes do banco..."

if supabase db push; then
    log "‚úÖ Migra√ß√µes aplicadas"
else
    error "‚ùå Falha ao aplicar migra√ß√µes"
    exit 1
fi

# 8. Deploy do frontend (se especificado)
if [ "$1" = "--deploy-frontend" ]; then
    log "üåê Fazendo deploy do frontend..."
    
    # Verificar se Vercel CLI est√° instalado
    if command -v vercel &> /dev/null; then
        log "üì§ Deploying to Vercel..."
        if vercel --prod; then
            log "‚úÖ Frontend deployed to Vercel"
        else
            error "‚ùå Falha no deploy do frontend"
            exit 1
        fi
    # Verificar se Netlify CLI est√° instalado
    elif command -v netlify &> /dev/null; then
        log "üì§ Deploying to Netlify..."
        if netlify deploy --prod --dir=dist; then
            log "‚úÖ Frontend deployed to Netlify"
        else
            error "‚ùå Falha no deploy do frontend"
            exit 1
        fi
    else
        warning "‚ö†Ô∏è Nenhuma plataforma de deploy detectada (Vercel/Netlify)"
        echo "Build est√° pronto em ./dist/"
    fi
fi

# 9. Verificar deploy
log "üîç Verificando deploy..."

# Testar uma function b√°sica
SUPABASE_URL=$(supabase status | grep "API URL" | awk '{print $3}')
if [ -n "$SUPABASE_URL" ]; then
    log "üåê API URL: $SUPABASE_URL"
    
    # Teste simples de conectividade
    if curl -f "${SUPABASE_URL}/rest/v1/" &> /dev/null; then
        log "‚úÖ API est√° respondendo"
    else
        warning "‚ö†Ô∏è API pode n√£o estar respondendo corretamente"
    fi
fi

# 10. Configura√ß√µes p√≥s-deploy
log "‚ö° Configura√ß√µes p√≥s-deploy..."

echo ""
echo -e "${GREEN}üéâ Deploy conclu√≠do com sucesso!${NC}"
echo ""
echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
echo "1. Verificar se todas as functions est√£o funcionando"
echo "2. Testar o fluxo completo de upload ‚Üí clips"
echo "3. Configurar monitoramento (opcional)"
echo "4. Configurar alertas (opcional)"
echo ""

echo -e "${BLUE}üîó Links √∫teis:${NC}"
if [ -n "$SUPABASE_URL" ]; then
    echo "‚Ä¢ Dashboard Supabase: https://supabase.com/dashboard"
    echo "‚Ä¢ API URL: $SUPABASE_URL"
    echo "‚Ä¢ Functions: $SUPABASE_URL/functions/v1/"
fi

echo ""
echo -e "${BLUE}üìä Monitoramento:${NC}"
echo "‚Ä¢ Logs: supabase functions logs [function-name]"
echo "‚Ä¢ Status: supabase status"
echo "‚Ä¢ Database: supabase db remote commit list"

echo ""
echo -e "${GREEN}‚ú® ClipsForge est√° pronto para produ√ß√£o!${NC}" 