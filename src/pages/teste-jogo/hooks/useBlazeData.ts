/**
 * üéØ HOOK BLAZE DATA - Captura dados reais da Blaze
 * 
 * Respons√°vel por:
 * - Conectar com Chromium
 * - Capturar n√∫meros da Blaze
 * - Gerenciar hist√≥rico
 */
import { useState, useEffect, useRef } from 'react'
import blazeRealDataService from '@/services/blazeRealDataService'
import type { BlazeNumberWithSource } from '../components/BlazeDataProvider'
import { BLAZE_CONFIG, logDebug } from '../config/BlazeConfig'

export function useBlazeData() {
  const [numbers, setNumbers] = useState<BlazeNumberWithSource[]>([])
  const [lastNumber, setLastNumber] = useState<BlazeNumberWithSource | null>(null)
  const [isConnected, setIsConnected] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState('Desconectado')
  
  // Controle de duplica√ß√£o
  const processedIds = useRef(new Set<string>())

  // ‚úÖ CORRE√á√ÉO 2: Carregar dados hist√≥ricos do Supabase quando componente monta
  useEffect(() => {
    const loadHistoricalData = async () => {
      try {
        const historicalData = await blazeRealDataService.getAllUnifiedData()
        if (historicalData.length > 0) {
          const blazeNumbers = historicalData.map(item => ({
            id: item.round_id || item.id || `fallback_${Date.now()}`,
            number: item.number,
            color: item.color,
            timestamp: new Date(item.timestamp_blaze || Date.now()).getTime(),
            source: (item.source === 'blaze_real_api' ? 'blaze' : 'csv') as 'blaze' | 'csv'
          }))
          
          // ‚úÖ CORRE√á√ÉO: Filtrar duplicatas para evitar keys duplicadas no React
          const uniqueNumbers = blazeNumbers.filter((num, index, self) => 
            index === self.findIndex(n => n.id === num.id)
          )
          
          setNumbers(uniqueNumbers)
          
          // ‚úÖ LOG INTELIGENTE: S√≥ logar quando h√° mudan√ßa
          if (lastLoggedCountRef.current !== uniqueNumbers.length) {
            console.log(`üìä HIST√ìRICO: ${uniqueNumbers.length} n√∫meros √∫nicos carregados (${blazeNumbers.length - uniqueNumbers.length} duplicatas removidas)`)
            lastLoggedCountRef.current = uniqueNumbers.length
          }
        }
      } catch (error) {
        console.error('‚ùå Erro carregando hist√≥rico:', error)
      }
      
      // ‚úÖ OTIMIZA√á√ÉO: Auto-conectar apenas se n√£o estiver conectado
      if (!isConnected) {
        try {
          setConnectionStatus('Conectando automaticamente...')
          await blazeRealDataService.startCapturing()
                  setIsConnected(true)
        setConnectionStatus('Conectado automaticamente')
        
        // ‚úÖ LOG INTELIGENTE: S√≥ logar primeira conex√£o
        if (!hasLoggedConnectionRef.current) {
          console.log('üöÄ AUTO-CONECTADO: Sistema conectou automaticamente √† Blaze')
          hasLoggedConnectionRef.current = true
        }
        } catch (error) {
          setIsConnected(false)
          setConnectionStatus('Erro na conex√£o autom√°tica')
          console.error('‚ùå Erro na conex√£o autom√°tica:', error)
        }
      }
    }
    
    loadHistoricalData()
  }, []) // Executar uma vez na montagem

  useEffect(() => {
    // Listener para dados da Blaze
    const handleBlazeData = (event: Event) => {
      const customEvent = event as CustomEvent
      const data = customEvent.detail
      
      // Evitar duplica√ß√£o
      if (processedIds.current.has(data.round_id)) {
        logDebug('üö´ Duplicata detectada:', data.round_id)
        return
      }
      processedIds.current.add(data.round_id)
      
      const newNumber: BlazeNumberWithSource = {
        id: data.round_id,
        number: data.number,
        color: data.color,
        timestamp: Date.now(),
        source: 'blaze'
      }
      
      setNumbers(prev => {
        const updated = [...prev, newNumber]
        // ‚úÖ CORRE√á√ÉO: Filtrar duplicatas para evitar keys duplicadas
        const uniqueUpdated = updated.filter((num, index, self) => 
          index === self.findIndex(n => n.id === num.id)
        )
        return uniqueUpdated
      })
      setLastNumber(newNumber)
      
      // ETAPA 1: Log m√≠nimo - s√≥ dados essenciais
      console.log(`üéØ BLAZE: ${newNumber.number} (${newNumber.color})`)
    }

    const handleConnectionError = () => {
      setIsConnected(false)
      setConnectionStatus('Erro de conex√£o')
      console.error('‚ùå Erro de conex√£o com a Blaze')
    }

    // Adicionar listeners
    window.addEventListener('blazeRealData', handleBlazeData)
    window.addEventListener('blazeConnectionError', handleConnectionError)

    return () => {
      window.removeEventListener('blazeRealData', handleBlazeData)
      window.removeEventListener('blazeConnectionError', handleConnectionError)
    }
      }, [])
  
      // ‚úÖ SINGLETON: Controle de polling para evitar m√∫ltiplas inst√¢ncias
  const isPollingActiveRef = useRef<boolean>(false)
  const lastPollingInitRef = useRef<number>(0)
  const lastLoggedCountRef = useRef<number>(0)
  const hasLoggedConnectionRef = useRef<boolean>(false)
  
  // ‚úÖ OTIMIZA√á√ÉO: Polling do banco a cada 30s para sincronizar hist√≥rico
  useEffect(() => {
    const now = Date.now()
    
    // ‚úÖ PROTE√á√ÉO DUPLA: Flag + Tempo (evitar execu√ß√µes < 5s)
    if (isPollingActiveRef.current && (now - lastPollingInitRef.current) < 5000) {
      console.log('üîÑ POLLING J√Å ATIVO: Ignorando configura√ß√£o duplicada')
      return
    }
    
    isPollingActiveRef.current = true
    lastPollingInitRef.current = now
    console.log('üîÑ INICIANDO POLLING: Configurando interval de 30s para sincronizar banco')
    
    // Fun√ß√£o de polling otimizada
    const executePolling = async () => {
      // ‚úÖ OTIMIZA√á√ÉO: S√≥ polling se conectado
      if (!isConnected) {
        console.log('üîÑ POLLING PAUSADO: Sistema desconectado')
        return
      }
      
      console.log('üîÑ POLLING EXECUTANDO: Buscando dados do banco...')
      try {
        const latestData = await blazeRealDataService.getAllUnifiedData()
        console.log(`üîÑ POLLING RESULTADO: ${latestData.length} registros encontrados no banco`)
        
        if (latestData.length > 0) {
          const blazeNumbers = latestData.map(item => ({
            id: item.round_id || item.id || `fallback_${Date.now()}`,
            number: item.number,
            color: item.color,
            timestamp: new Date(item.timestamp_blaze || Date.now()).getTime(),
            source: (item.source === 'blaze_real_api' ? 'blaze' : 'csv') as 'blaze' | 'csv'
          }))
          
          setNumbers(prev => {
            console.log(`üîÑ POLLING COMPARA√á√ÉO: ${blazeNumbers.length} do banco vs ${prev.length} em mem√≥ria`)
            
            // Filtrar apenas n√∫meros realmente novos para evitar re-render desnecess√°rio
            const existingIds = new Set(prev.map(n => n.id))
            const newNumbers = blazeNumbers.filter(n => !existingIds.has(n.id))
            
            console.log(`üîÑ POLLING FILTRO: ${newNumbers.length} n√∫meros realmente novos detectados`)
            
            if (newNumbers.length > 0) {
              console.log(`üìä POLLING: ${newNumbers.length} n√∫meros novos sincronizados do banco`)
              console.log('üìä N√öMEROS NOVOS:', newNumbers.map(n => `${n.number}(${n.color})`).join(', '))
              
              const uniqueNumbers = [...prev, ...newNumbers].filter((num, index, self) => 
                index === self.findIndex(n => n.id === num.id)
              )
              return uniqueNumbers.sort((a, b) => a.timestamp - b.timestamp)
            } else {
              console.log('üìä POLLING: Nenhum n√∫mero novo - banco est√° sincronizado')
            }
            
            return prev
          })
        } else {
          console.log('‚ö†Ô∏è POLLING: Nenhum dado encontrado no banco')
        }
      } catch (error) {
        console.error('‚ùå Erro no polling do banco:', error)
      }
    }
    
    // Executar imediatamente para teste
    console.log('üî• TESTE: Executando polling imediatamente...')
    executePolling()
    
    // Configurar interval
    const pollingInterval = setInterval(executePolling, 30000)
    console.log('‚úÖ POLLING CONFIGURADO: Interval ativo, primeira execu√ß√£o em 30s')
    
    return () => {
      console.log('üõë POLLING PARADO: Limpando interval')
      clearInterval(pollingInterval)
      isPollingActiveRef.current = false // ‚úÖ RESETAR FLAG
    }
  }, [])

  // Fun√ß√£o para conectar (com prote√ß√£o contra m√∫ltiplas chamadas)
  const connect = async () => {
    if (isConnected) {
      console.log('‚ö†Ô∏è J√° conectado - ignorando chamada duplicada')
      return
    }
    
    try {
      setConnectionStatus('Conectando...')
      await blazeRealDataService.startCapturing()
      setIsConnected(true)
      setConnectionStatus('Conectado')
      console.log('‚úÖ Conectado √† Blaze')
    } catch (error) {
      setIsConnected(false)
      setConnectionStatus('Erro ao conectar')
      console.error('‚ùå Erro ao conectar:', error)
      throw error
    }
  }

  // Fun√ß√£o para desconectar
  const disconnect = () => {
    blazeRealDataService.stopCapturing()
    setIsConnected(false)
    setConnectionStatus('Desconectado')
    console.log('‚èπÔ∏è Desconectado da Blaze')
    
    // Limpar stats se configurado
    if (BLAZE_CONFIG.RESET_STATS_ON_DISCONNECT) {
      setNumbers([])
      setLastNumber(null)
      processedIds.current.clear()
    }
  }

  // Fun√ß√£o para adicionar dados CSV
  const addCSVData = (csvNumbers: BlazeNumberWithSource[]) => {
    setNumbers(prev => {
      // Filtrar duplicatas baseado no ID
      const existingIds = new Set(prev.map(n => n.id))
      const newNumbers = csvNumbers.filter(n => !existingIds.has(n.id))
      
      if (newNumbers.length > 0) {
        console.log(`üìÑ CSV: ${newNumbers.length} n√∫meros adicionados`)
        const updated = [...prev, ...newNumbers]
        // Ordenar por timestamp - hist√≥rico ilimitado
        return updated
          .sort((a, b) => a.timestamp - b.timestamp)
      }
      
      return prev
    })
  }

  return {
    numbers,
    lastNumber,
    isConnected,
    connectionStatus,
    connect,
    disconnect,
    addCSVData
  }
} 